{"version":3,"sources":["StockList.js","StockUpdate.js","StockUpdateContainer.js","App.js","serviceWorker.js","index.js"],"names":["StockList","this","props","inputElement","current","focus","className","onSubmit","addStock","placeholder","ref","value","currentItem","text","onChange","handleInput","type","Component","symbol","name","price","React","createRef","StockUpdateContainer","console","log","stockData","stocks","Object","keys","map","stock","StockUpdate","Math","random","URL","App","ws","WebSocket","e","preventDefault","stockSymbol","state","setState","stockSymbols","send","JSON","stringify","updateStocks","submitStock","target","onopen","onmessage","event","parse","data","render","onclose","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAsBeA,G,mMAnBPC,KAAKC,MAAMC,aAAaC,QAAQC,U,+BAGhC,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,UACX,0BAAMC,SAAUN,KAAKC,MAAMM,UACvB,2BAAOC,YAAY,QACZC,IAAKT,KAAKC,MAAMC,aAChBQ,MAAOV,KAAKC,MAAMU,YAAYC,KAC9BC,SAAUb,KAAKC,MAAMa,cAE5B,4BAAQC,KAAK,UAAb,sB,GAdAC,cCAT,kBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,MAAjB,OACX,wBAAId,UAAU,QAAQI,IAAMW,IAAMC,aAC9B,gCAASJ,GADb,IAC8B,gCAASC,GADvC,IACsD,4BAAKC,KCYhDG,E,iLAZD,IAAD,OACLC,QAAQC,IAAIxB,KAAKC,MAAMwB,WACvB,IAAIC,EAASC,OAAOC,KAAK5B,KAAKC,MAAMwB,WAAWI,KAAI,SAAAC,GAC/C,OAAO,kBAACC,EAAD,CACCd,OAAQ,EAAKhB,MAAMwB,UAAUK,GAAOb,OACpCC,KAAM,EAAKjB,MAAMwB,UAAUK,GAAOZ,KAElCC,MAAOa,KAAKC,cAExB,OAAO,4BAAKP,O,GAVeV,aCG7BkB,EAAM,yBAoFGC,E,YAjFX,WAAYlC,GAAQ,IAAD,8BACf,4CAAMA,KAOVmC,GAAK,IAAIC,UAAUH,GARA,EAuCnB3B,SAAW,SAAA+B,GACPA,EAAEC,iBACF,IAAMC,EAAc,EAAKC,MAAM9B,YACN,KAArB6B,EAAY5B,OACZW,QAAQC,IAAIgB,GACZ,EAAKE,UAAS,SAAAD,GAAK,MAAK,CAACE,aAAa,CAAEH,GAAH,mBAAmBC,EAAME,mBAC9D,EAAKP,GAAGQ,KAAKC,KAAKC,UAAU,EAAKL,MAAME,iBA7C5B,EAiDnBI,aAAe,SAAArB,GACX,EAAKgB,UAAS,SAAAD,GAAK,MAAK,CAAChB,UAAWC,OAlDrB,EAqDnBsB,YAAc,SAAAR,GACV,EAAKjC,SAASiC,GACd,EAAKJ,GAAGQ,KAAKC,KAAKC,UAAU,EAAKL,MAAME,gBAvDxB,EA0DnB7B,YAAc,SAAAwB,GACV,IACM3B,EAAc,CAAEC,KADL0B,EAAEW,OAAOvC,OAE1B,EAAKgC,SAAS,CAAE/B,iBA7DD,EAgEnBT,aAAekB,IAAMC,YA9DjB,EAAKoB,MAAQ,CACTE,aAAc,CAAC,QAAS,QACxBlB,UAAW,GACXd,YAAa,CAACC,KAAM,KALT,E,iFAUE,IAAD,OAChBZ,KAAKoC,GAAGc,OAAS,WACb3B,QAAQC,IAAI,iCAGhBxB,KAAKoC,GAAGe,UAAY,SAAAC,GAChB,IAAM3B,EAAYoB,KAAKQ,MAAMD,EAAME,MAEnC,EAAKP,aAAatB,GAUlB,EAAK8B,OAAO,kBAAC,EAAD,CAAsB9B,UAAW,EAAKgB,MAAMhB,cAG5DzB,KAAKoC,GAAGoB,QAAU,WACdjC,QAAQC,IAAI,+BACZ,EAAKkB,SAAS,CACVN,GAAI,IAAIC,UAAUH,Q,+BAiC1B,OACI,yBAAK7B,UAAU,OACZ,kBAAC,EAAD,CACIE,SAAUP,KAAKO,SACfL,aAAcF,KAAKE,aACnBY,YAAad,KAAKc,YAClBH,YAAaX,KAAKyC,MAAM9B,cAE5B,kBAAC,EAAD,CAAsBc,UAAWzB,KAAKyC,MAAMhB,iB,GA5EzCT,aCKEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8a174442.chunk.js","sourcesContent":["import React, { Component } from 'react'\nclass StockList extends Component {\n    componentDidUpdate() {\n        this.props.inputElement.current.focus()\n    }\n    render() {\n        return (\n            <div className=\"stockList\">\n                <div className=\"header\">\n                    <form onSubmit={this.props.addStock}>\n                        <input placeholder=\"Stock\"\n                               ref={this.props.inputElement}\n                               value={this.props.currentItem.text}\n                               onChange={this.props.handleInput}\n                        />\n                        <button type=\"submit\"> Add Stock </button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\nexport default StockList","import React from 'react'\nexport default ({ symbol, name, price}) =>\n    <li className='stock' ref={ React.createRef() } >\n        <strong>{symbol}</strong> <strong>{name}</strong> <em>{price}</em>\n    </li>","import React, { Component } from 'react'\nimport StockUpdate from './StockUpdate'\nclass StockUpdateContainer extends Component {\n    render() {\n        console.log(this.props.stockData)\n        var stocks = Object.keys(this.props.stockData).map(stock => {\n            return <StockUpdate\n                    symbol={this.props.stockData[stock].symbol}\n                    name={this.props.stockData[stock].name}\n                    //price={this.props.stockData[stock].price}/>\n                    price={Math.random()}/>\n        })\n        return <ul>{stocks}</ul>\n    }\n}\nexport default StockUpdateContainer","import React, { Component } from 'react';\nimport './App.css';\nimport StockList from './StockList'\nimport StockUpdateContainer from './StockUpdateContainer'\n\nconst URL = 'ws://localhost:9000/ws'\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            stockSymbols: [\"GOOGL\", \"AAPL\"],\n            stockData: [],\n            currentItem: {text: \"\"},\n        }\n    }\n    ws = new WebSocket(URL)\n\n    componentDidMount() {\n        this.ws.onopen = () => {\n            console.log(\"Got our websocket connection\")\n        }\n\n        this.ws.onmessage = event =>{\n            const stockData = JSON.parse(event.data)\n            //console.log(stockData)\n            this.updateStocks(stockData)\n            /*let stockEl = document.querySelector(\"#stock\")\n            console.log(stockEl)*/\n            /*Object.keys(this.state.stockData).map((symbol) =>\n                <StockUpdate\n                    symbol={this.state.stockData[symbol].symbol}\n                    name={this.state.stockData[symbol].name}\n                    price={this.state.stockData[symbol].price}\n                />,\n            )*/\n            this.render(<StockUpdateContainer stockData={this.state.stockData} />)\n        }\n\n        this.ws.onclose = () => {\n            console.log(\"Websocket connection closed\")\n            this.setState({\n                ws: new WebSocket(URL)\n            })\n        }\n    }\n\n    addStock = e => {\n        e.preventDefault()\n        const stockSymbol = this.state.currentItem\n        if (stockSymbol.text !== '') {\n            console.log(stockSymbol)\n            this.setState(state => ({stockSymbols: [stockSymbol, ...state.stockSymbols]}))\n            this.ws.send(JSON.stringify(this.state.stockSymbols))\n        }\n    }\n\n    updateStocks = stocks => {\n        this.setState(state => ({stockData: stocks}))\n    }\n\n    submitStock = stockSymbol => {\n        this.addStock(stockSymbol)\n        this.ws.send(JSON.stringify(this.state.stockSymbols))\n    }\n\n    handleInput = e => {\n        const itemText = e.target.value\n        const currentItem = { text: itemText }\n        this.setState({ currentItem, })\n    }\n\n    inputElement = React.createRef()\n\n    render() {\n        return (\n            <div className=\"App\">\n               <StockList\n                   addStock={this.addStock}\n                   inputElement={this.inputElement}\n                   handleInput={this.handleInput}\n                   currentItem={this.state.currentItem}\n               />\n               <StockUpdateContainer stockData={this.state.stockData}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}